{"version":3,"sources":["App.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","row","setRow","col","setCol","displayButton","e","length","target","getAttribute","parentNode","childNodes","classList","add","s","buttonRemove","hideButton","remove","currentTarget","window","state","className","map","x","indextr","key","y","indextd","onMouseLeave","bind","onMouseOverCapture","trid","tdid","onClick","splice","push","buttonAdd","one","color","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.335c0d8c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__28mQw\",\"color\":\"App_color__2NRF3\",\"buttonRemove\":\"App_buttonRemove__1AyPS\",\"buttonAdd\":\"App_buttonAdd__3ePqb\",\"one\":\"App_one__3tFLu\"};","import React, {useState} from 'react';\r\nimport s from './App.module.css';\r\n\r\n/*\r\n* all buttons and cell\r\n* are part of table>tbody\r\n* and present like <td> tag\r\n*/\r\n\r\nfunction App() {\r\n\r\n  // number of Row\r\n  const [row, setRow] = useState([0,1,1,1,1,0]);\r\n\r\n  //number of Cell\r\n  const [col, setCol] = useState([0,1,1,1,1,0]);\r\n\r\n  /*\r\n  * mouseOver td(cell) event\r\n  * to display remove-button on the top and left.\r\n  * initialize IS  making by adding class into the same\r\n  * trID(for deleteRow) &&  tdID(for deleteCell) cell , like event.target\r\n  */\r\n  const displayButton = (e) =>{\r\n    // eslint-disable-next-line\r\n    if(row.length != 3){\r\n      // eslint-disable-next-line\r\n      if(e.target.getAttribute('trid') != row.length-1 && e.target.getAttribute('tdid') != col.length-1 && e.target.getAttribute('trid') != 0){\r\n        e.target.parentNode.childNodes[0].classList.add(`${s.buttonRemove}`)\r\n      }\r\n    }\r\n    // eslint-disable-next-line\r\n    if(col.length !=3){\r\n      // eslint-disable-next-line\r\n      if(e.target.getAttribute('tdid') != 0 && e.target.getAttribute('tdid') != col.length-1 && e.target.getAttribute('trid') != row.length-1){\r\n        e.target.parentNode.parentNode.childNodes[0].childNodes[e.target.getAttribute('tdid')].classList.add(`${s.buttonRemove}`)\r\n      }\r\n    }\r\n  };\r\n\r\n  /*\r\n  * mouseLeft td(cell) event\r\n  * to hide remove-button on the top and left\r\n  */\r\n  const hideButton = (e) =>{\r\n    e.target.parentNode.childNodes[0].classList.remove(`${s.buttonRemove}`);\r\n    e.currentTarget.parentNode.parentNode.childNodes[0].childNodes[e.target.getAttribute('tdid')].classList.remove(`${s.buttonRemove}`);\r\n  };\r\n\r\n  // onClick events to set row/col\r\n  const deleteCol = () =>{\r\n    col.splice(-1,1);\r\n    col.splice(-1,1);\r\n    col.push(0);\r\n    setCol(col => col);\r\n    setRow(row=>[...row])\r\n  };\r\n  const deleteRow = () =>{\r\n    row.splice(-1,1);\r\n    row.splice(-1,1);\r\n    row.push(0);\r\n    setCol(col => [...col]);\r\n    setRow(row => row)\r\n  };\r\n  const addRow = () =>{\r\n    row.splice(row.length-1,0,1);\r\n    setCol(col => [...col]);\r\n    setRow(row => row)\r\n  };\r\n  const addCol = ()=>{\r\n    col.splice(col.length-1,0,1);\r\n    setCol(col => col);\r\n    setRow(row => [...row])\r\n  };\r\n\r\n  window.state = [col,row];\r\n  return (\r\n    <div className={s.App} >\r\n      <table >\r\n        <tbody>\r\n          {row.map((x,indextr)=>\r\n\r\n              <tr key={indextr}  >\r\n                {col.map((y,indextd)=>\r\n                    <td key={`${indextr}${indextd}`}\r\n                        onMouseLeave={hideButton.bind(this)}\r\n                        onMouseOverCapture={displayButton.bind(this)}\r\n                        trid={indextr} tdid={indextd}\r\n                        onClick={indextr===0 ? ()=>deleteCol() : indextd===0 ? ()=>deleteRow() : indextr===row.length-1 ? ()=>addRow(): indextd===col.length-1 ? ()=>addCol(): ()=>{}}\r\n                        className={\r\n                          (indextr===0 || indextd===col.length-1) && indextr!==1 ? ' ':\r\n                        ((indextr===row.length-1 && indextd===1) || (indextr===1 && indextd===col.length-1)) ? `${s.buttonAdd}` :\r\n                            indextd===0 || indextr===row.length-1? ' ' :  row.length === 3 || col.length === 3 ? `${s.one} ${s.color}` : `${s.color}`\r\n                        }/>\r\n                )}\r\n              </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}